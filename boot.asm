ORG 0x7C00 ;THIS TELLS NASM WHERE IN MEMORY OUR PROGRAM WILL RUN
BITS 16 ;WE ARE WRTING IN 16-BIT CODE

start:
    mov si,message ;ADDRESS OF THE 'message' MOVE INTO SI REGISTER
    call print ;CALLS OUR 'print' FUNCTION 
    jmp $ ;INFINITE LOOP, GO-TO THIS FUNCTION 


print:
    mov bx,0 ;CLEARS BX REGISTER TO USE IT AS A COUNTER
.loop:
    lodsb ; LOADS THE BYTE AT ADDRESS SI INTO AL AND INCREMENT SI 
    cmp al,0 ;COMPARE THE VALUE IN AL TO 0 (end of the string)
    je .done  ;IF AL IS 0, THEN WE ARE AT THE END OF THE STRING AND WE ARE DONE!
    call print_char ;OTHERWISE PRINT THE CHARACTER IN AL 
    jmp .loop ;LOOPS TO THE NEXT CHARACTER 
.done:
    ret ;RETURN FROM THE PRINT FUNCTION 
    
print_char:
    mov ah,0eh ;MOVE 0eh INTO AH,THIS IS THE BIOS SERVICE, NUMBER FOR PRINTING THE CHARACTER 
    int 0x10 ;CALL BIOS INTERRUPT 0x10
    ret ;RETURN FROM print_char FUNCTION 

message: db 'Hello World!',0 ;OUR null-terminated STRING TO BE PRINTED
times 510-($ -$$) db 0; FILL THE REST OF THE SECTOR WITH ZEROS, UPTO 510 BYTES 
dw 0xAA55 ;THE BOOT SECTOR SIGNATURE 


